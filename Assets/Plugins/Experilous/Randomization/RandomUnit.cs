/******************************************************************************\
* Copyright Andy Gainey                                                        *
\******************************************************************************/

using System.Runtime.InteropServices;

namespace Experilous.Randomization
{
	public static class RandomUnit
	{
		[StructLayout(LayoutKind.Explicit)]
		private struct BitwiseFloat
		{
			[FieldOffset(0)]
			public uint bits;
			[FieldOffset(0)]
			public float number;
		}

		[StructLayout(LayoutKind.Explicit)]
		private struct BitwiseDouble
		{
			[FieldOffset(0)]
			public ulong bits;
			[FieldOffset(0)]
			public double number;
		}

		#region Open

		public static float OpenFloat(IRandomEngine engine)
		{
			uint random;
			do
			{
				random = engine.Next32() & 0x007FFFFFU;
			} while (random == 0U);

			BitwiseFloat value;
			value.number = 0f;
			value.bits = 0x3F800000U | random;
			return value.number - 1f;
		}

		public static double OpenDouble(IRandomEngine engine)
		{
			ulong random;
			do
			{
				random = engine.Next64() & 0x000FFFFFFFFFFFFFUL;
			} while (random == 0UL);

			BitwiseDouble value;
			value.number = 0.0;
			value.bits = 0x3FF0000000000000UL | random;
			return value.number - 1.0;
		}

		#endregion

		#region HalfOpen

		public static float HalfOpenFloat(IRandomEngine engine)
		{
			BitwiseFloat value;
			value.number = 0f;
			value.bits = 0x3F800000U | 0x007FFFFFU & engine.Next32();
			return value.number - 1f;
		}

		public static double HalfOpenDouble(IRandomEngine engine)
		{
			BitwiseDouble value;
			value.number = 0.0;
			value.bits = 0x3FF0000000000000UL | 0x000FFFFFFFFFFFFFUL & engine.Next64();
			return value.number - 1.0;
		}

		#endregion

		#region HalfClosed

		public static float HalfClosedFloat(IRandomEngine engine)
		{
			BitwiseFloat value;
			value.number = 0f;
			value.bits = 0x3F800000U | 0x007FFFFFU & engine.Next32();
			return 2f - value.number;
		}

		public static double HalfClosedDouble(IRandomEngine engine)
		{
			BitwiseDouble value;
			value.number = 0.0;
			value.bits = 0x3FF0000000000000UL | 0x000FFFFFFFFFFFFFUL & engine.Next64();
			return 2.0 - value.number;
		}

		#endregion

		#region Closed

		public static float ClosedFloat(IRandomEngine engine)
		{
			// With a closed float, there are 2^23 + 1 possibilities.  A half open range contains only 2^23 possibilities,
			// with 1.0 having a 0 probability, and is very efficient to generate.  If a second random check were performed
			// that had a 2^23 in 2^23 + 1 chance of passing, and on failure resulted in a value of 1.0 being returned
			// instead of the originally generated number, then all values would have exactly the correct target probability.

			// To achieve this while still avoiding that second random check in most cases, the excess 11 bits generated by
			// a call to Next32() are used to perform part of that second random check.  This check has a 2^11 - 1 in 2^11
			// chance of passing, in which case the original number is returned.  On that rare 1 in 2048 case that it fails,
			// then another random check is performed which has a 2^23 - 2^11 + 1 in 2^23 + 1 chance of passing.  If it still
			// passes, then the original number is still returned; otherwise, 1.0 is returned.  The effect is that this pair
			// of secondary random checks additively has the requisite 2^23 in 2^23 + 1 chance of passing, but over 99.95%
			// of the time only one call to Next32() is ever executed.  In the remaining few cases, on average about two
			// additional calls will be required, or one call and some integer multiplication/division/remainder, depending
			// on how NextLessThan() is implemented.

			uint random = engine.Next32();
			BitwiseFloat value;
			value.number = 0f;
			value.bits = 0x3F800000U | 0x007FFFFFU & random;

			if ((random & 0xFFE00000U) != 0xFFE00000U)
			{
				return value.number - 1f;
			}
			else if (engine.NextLessThan(0x00800001U) < 0x007FF801U)
			{
				return value.number - 1f;
			}
			else
			{
				return 1f;
			}
		}

		public static double ClosedDouble(IRandomEngine engine)
		{
			// With a closed double, there are 2^52 + 1 possibilities.  A half open range contains only 2^52 possibilities,
			// with 1.0 having a 0 probability, and is very efficient to generate.  If a second random check were performed
			// that had a 2^52 in 2^52 + 1 chance of passing, and on failure resulted in a value of 1.0 being returned
			// instead of the originally generated number, then all values would have exactly the correct target probability.

			// To achieve this while still avoiding that second random check in most cases, the excess 12 bits generated by
			// a call to Next64() are used to perform part of that second random check.  This check has a 2^12 - 1 in 2^12
			// chance of passing, in which case the original number is returned.  On that rare 1 in 4096 case that it fails,
			// then another random check is performed which has a 2^52 - 2^12 + 1 in 2^52 + 1 chance of passing.  If it still
			// passes, then the original number is still returned; otherwise, 1.0 is returned.  The effect is that this pair
			// of secondary random checks additively has the requisite 2^52 in 2^52 + 1 chance of passing, but over 99.97%
			// of the time only one call to Next64() is ever executed.  In the remaining few cases, on average about two
			// additional calls will be required, or one call and some integer multiplication/division/remainder, depending
			// on how NextLessThan() is implemented.

			ulong random = engine.Next64();
			BitwiseDouble value;
			value.number = 0.0;
			value.bits = 0x3FF0000000000000UL | 0x000FFFFFFFFFFFFFUL & random;

			if ((random & 0xFFF0000000000000UL) != 0xFFF0000000000000UL)
			{
				return value.number - 1.0;
			}
			else if (engine.NextLessThan(0x0010000000000001UL) < 0x000FFFFFFFFFF001UL)
			{
				return value.number - 1.0;
			}
			else
			{
				return 1.0;
			}
		}

		#endregion
	}
}
